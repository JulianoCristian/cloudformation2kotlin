import com.typedpath.tools.awscloudformation.schema.JsonSchema2KotlinKt
import com.typedpath.tools.deployment.S3deploymentKt

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id 'maven-publish'
}

group 'com.typedpath.tools'
version '1.0-SNAPSHOT'


sourceCompatibility = 1.8

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'kotlin'
apply plugin: 'idea'


repositories {
/*    maven {
        url 'https://maventesthost-20190618-091157.s3.amazonaws.com/repository'
    }*/
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


compileKotlin {
    doFirst {
        JsonSchema2KotlinKt.transformDirectory("${projectDir}",
                ["**/sample/*.json"],
                "${buildDir.absolutePath}/generated/source/kotlin/", "com.typedpath.awscloudformation.schema")
    }
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def mavenGroupId = 'com.typedpath'
def mavenArtifactId = 'cloudformation2kotlin'
def mavenVersion = '1.1'

task s3MavenDeploy {
    doLast {
        def local
        repositories.each {
            if (it.displayName.startsWith("MavenLocal")) {
                local = it
            }
        }
        //TODO make this an input
        def s3MavenDeploymentBucketName = "repositorybuckettest65-s3hostingbucket-qpezmj5xooak"
        def region = "us-east-1"

        S3deploymentKt.deploy(local.url.path,
                mavenGroupId,
                mavenArtifactId,
                mavenVersion,
                s3MavenDeploymentBucketName, region)
    }
}


sourceSets {
    main {
        kotlin {
            srcDir "${buildDir.absolutePath}/generated/source/kotlin/"
        }
    }
}


def artifact = {
    def id = 'cloudformation2kotlin'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = mavenGroupId
            artifactId = mavenArtifactId
            version = mavenVersion
            from components.java
        }
    }
}

task notes {
    doLast {
        System.out.println("local maven deploy: gradle publishToMavenLocal")
        System.out.println("s3 maven deploy: gradle s3MavenDeploy")
    }
}